(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{372:function(t,s,a){"use strict";a.r(s);var n=a(45),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"rxandroid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rxandroid"}},[t._v("#")]),t._v(" RxAndroid")]),t._v(" "),a("p",[t._v("RxAndroid 는 RxJava에 최소한의 클래스를 추가하여 안드로이드 앱에서 리액티브 구성요소를 쉽고 간편하게 사용하게 만드는 라이브러리 입니다.")]),t._v(" "),a("p",[t._v("RxJava는 간단히 말해서 발행, 구독 입니다. 예를들어"),a("br"),t._v("\n누군가는 데이터의 강에 데이터를 흘려보내고"),a("br"),t._v("\n누군가는 데이터의 강에서 데이터를 줍습니다.\n이때 흘려보내는걸 발행, 줍는걸 구독이라고 합니다.")]),t._v(" "),a("p",[t._v("예를들어 데이터를 받아와서 ui에 업데이트 하는 앱이라면"),a("br"),t._v("\n발행에서 데이터를 가져오고 구독에서 ui에 업데이트 하면 됩니다.")]),t._v(" "),a("p",[t._v("코드는 subscribeOn, observerOn, subscribe 3개로 나뉘게 됩니다.")]),t._v(" "),a("p",[t._v("먼저 subscribeOn은 데이터를 강에 흘려보내는 스레드(스케쥴러)를 지정하는 작업입니다."),a("br"),t._v("\n정확하게는 데이터를 발행(연산)하는 스케줄러를 지정하는 것이라고 할 수 있습니다.")]),t._v(" "),a("p",[t._v("그 후에 obsereverOn으로 데이터를 줍는 스레드(스케쥴러)를 지정합니다.\n데이터를 구독하는 스케쥴러를 지정하는 것입니다.")]),t._v(" "),a("p",[t._v("마지막으로 subscribe는 데이터를 주워서 처리하는 역할 입니다."),a("br"),t._v("\n인자값으로 람다식 두개를 전달하며 첫번째 람다는 성공했을 떄, 두번째 람다는 실패했을 때 실행됩니다.")]),t._v(" "),a("p",[t._v("아래는 Retrofit 예제입니다.")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//아래에서 설명")]),t._v("\n compositeDisposable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CompositeDisposable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n compositeDisposable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            RetrofitCreator\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GithubService"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRepoList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"discord"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 네트워크 입출력이기 떄문에 io를 구독")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribeOn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Schedulers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("io")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// UI수정을 위해서 mainthread를 사용               ")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observeOn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AndroidSchedulers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mainThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    \n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 정상적으로 잘 받아왔을경우 처리")]),t._v("\n                    text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("full_name\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 오류가 생겼을 경우 처리")]),t._v("\n                    Log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MainActivity"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ERROR message : '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("${")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("}")])]),t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"compositedisposable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compositedisposable"}},[t._v("#")]),t._v(" CompositeDisposable")]),t._v(" "),a("p",[t._v("만약 구독자가 텍스트뷰를 참조하고 있을 때, 액티비티가 비정상 종료 되더라도  텍스트뷰가 참조하는 액티비티는 GC 대상이 아니기 때문에 메모리 누수가 발생합니다."),a("br"),t._v("\n이를 해결하기 위해서는 CompositeDisposable 를 사용하면 됩니다.")])])}),[],!1,null,null,null);s.default=e.exports}}]);